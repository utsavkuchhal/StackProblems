import java.util.ArrayList;
import java.util.Arrays;
import java.util.OptionalInt;
import java.util.Stack;

import com.sun.tools.javac.util.Pair;

public class StockSpan {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr =  {10,100,80, 60, 70, 60, 75, 85};
//		StockSpan(arr);
		StockSpanPair(arr);
	}
	
	public static void StockSpan(int[] arr)
	{
		ArrayList<Integer> list = new ArrayList<Integer>();
		Stack<pair> stack = new Stack<pair>();
	
		
		for(int i = 0; i < arr.length; i++)
		{
			if (stack.isEmpty()) {
				list.add(i + 1);
			}else if (stack.peek().first >= arr[i]) {
				list.add(i - stack.peek().second);
			}else {
				while(!stack.isEmpty() && stack.peek().first <= arr[i])
				{
					stack.pop();
				}
				if (stack.isEmpty()) {
					list.add(i + 1);
				}else {
					list.add(i - stack.peek().second);
				}
			}
		stack.push(new pair(arr[i],i));
		}
		
		for (int i = 0; i < list.size(); i++) {
			System.out.println(list.get(i));
		}
	}
	
	public static void StockSpanPair(int[] arr)
	{
		ArrayList<Integer> list = new ArrayList<Integer>();
		Stack<Integer> stack = new Stack<Integer>();
	
		for(int i = 0; i < arr.length; i++)
		{
			if (stack.isEmpty()) {
				list.add(i + 1);
			}else if (arr[stack.peek()] >= arr[i]) {
				list.add(i - stack.peek());
			}else {
				while(!stack.isEmpty() && arr[stack.peek()] <= arr[i])
				{
					stack.pop();
				}
				if (stack.isEmpty()) {
					list.add(i + 1);
				}else {
					list.add(i - stack.peek());
				}
			}
		stack.push(i);
		}
		
		for (int i = 0; i < list.size(); i++) {
			System.out.println(list.get(i));
		}
		
	}
	
	static class pair{
		int first;
		int second;
		public pair(int a,int b)
		{
			this.first = a;
			this.second = b;
		}
	}
}
