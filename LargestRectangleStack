import java.util.ArrayList;
import java.util.Collections;
import java.util.Stack;

public class LargestRectangle {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = {10,10,10,11,11};
		System.out.println(LargestRectangle(arr));
	}
	
	public static int LargestRectangle(int[] arr)
	{
		ArrayList<Integer> left = NearestSmallerToLeftStack(arr);
		System.out.println(left);
		ArrayList<Integer> right = NearestSmaallerToRightStack(arr);
		System.out.println(right);
		int ans = Integer.MIN_VALUE;
		for(int i = 0; i < arr.length; i++)
		{
			int width = right.get(i) - left.get(i) - 1;
			
			int area = width * arr[i];
			
			if (area > ans) {
				ans  = area;
			}
			
		}
		return ans;
	}
	
	public static ArrayList<Integer> NearestSmallerToLeftStack(int[] arr)
	{
	Stack<pair> stack = new Stack<pair>();
	ArrayList<Integer> list = new ArrayList<Integer>();
	for(int i = 0 ; i < arr.length; i++)
	{
		if (stack.isEmpty()){
			list.add(-1);
		}else if(arr[i] > stack.peek().first){
			list.add(stack.peek().second);
		}else {
			while(!stack.isEmpty() && stack.peek().first >= arr[i])
			{
				stack.pop();
			}
			if(!stack.isEmpty())
			{
				list.add(stack.peek().second);
			}else{
				list.add(-1);
			}
		}
		stack.push(new pair(arr[i],i));
	}
	return list;
}
	
	public static ArrayList<Integer> NearestSmaallerToRightStack(int[] arr)
	{
		Stack<pair> stack = new Stack<pair>();
		ArrayList<Integer> list = new ArrayList<Integer>();
		for(int i = arr.length - 1; i >= 0; i--)
		{
			if (stack.isEmpty()){
				list.add(arr.length);
			}else if(arr[i] > stack.peek().first){
				list.add(stack.peek().second);
			}else {
				while(!stack.isEmpty() && stack.peek().first > arr[i])
				{
					stack.pop();
				}
				if(!stack.isEmpty())
				{
					list.add(stack.peek().second);
				}else{
					list.add(arr.length);
				}
			}
			stack.push(new pair(arr[i], i));
		}
		
		Collections.reverse(list);
		return list;
	}
	
	static class pair{
		int first;
		int second;
		public pair(int a,int b)
		{
			this.first = a;
			this.second = b;
		}
	}
}
