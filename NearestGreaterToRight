import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;
import java.util.Vector;



public class NearestGreaterToRight {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr = {1,2,3,4,5};
//		NearestGreaterToRight(arr);
		
//		NearestGreaterToRightStack(arr);
		
//		NearestGreaterToLeftStack(arr);
		
//		NearestSmaallerToRightStack(arr);
		
		NearestSmallerToLeftStack(arr);
	}
	
	public static void NearestGreaterToRight(int[] arr)
	{	
		for(int i = 0; i < arr.length; i++)
		{
			int temp = arr[i];
			int found  = 0;
			for(int j = i + 1; j < arr.length; j++)
			{
				if(arr[j] > temp) {
					System.out.println(arr[j]);
					found = 1;
					break;
				}
			}
			if (found == 0) {
				System.out.println(-1);
			}
		}
	}

	public static void NearestGreaterToRightStack(int[] arr)
	{
		Stack<Integer> stack = new Stack<Integer>();
		ArrayList<Integer> list = new ArrayList<Integer>();
		for(int i = arr.length - 1; i >= 0; i--)
		{
			if (stack.isEmpty()){
				list.add(-1);
			}else if(arr[i] < stack.peek()){
				list.add(stack.peek());
			}else {
				while(!stack.isEmpty() && stack.peek() < arr[i])
				{
					stack.pop();
				}
				if(!stack.isEmpty())
				{
					list.add(stack.peek());
				}else{
					list.add(-1);
				}
			}
			stack.push(arr[i]);
		}
		
		for(int i = list.size() - 1; i >= 0; i--)
		{
			System.out.println(list.get(i));
		}
	}

	public static void NearestGreaterToLeftStack(int[] arr)
	{
	Stack<Integer> stack = new Stack<Integer>();
	ArrayList<Integer> list = new ArrayList<Integer>();
	for(int i = 0 ; i < arr.length; i++)
	{
		if (stack.isEmpty()){
			list.add(-1);
		}else if(arr[i] < stack.peek()){
			list.add(stack.peek());
		}else {
			while(!stack.isEmpty() && stack.peek() < arr[i])
			{
				stack.pop();
			}
			if(!stack.isEmpty())
			{
				list.add(stack.peek());
			}else{
				list.add(-1);
			}
		}
		stack.push(arr[i]);
	}
	
	for(int i = 0; i < list.size(); i++)
	{
		System.out.println(list.get(i));
	}
}
	
	public static void NearestSmallerToLeftStack(int[] arr)
	{
	Stack<Integer> stack = new Stack<Integer>();
	ArrayList<Integer> list = new ArrayList<Integer>();
	for(int i = 0 ; i < arr.length; i++)
	{
		if (stack.isEmpty()){
			list.add(-1);
		}else if(arr[i] > stack.peek()){
			list.add(stack.peek());
		}else {
			while(!stack.isEmpty() && stack.peek() > arr[i])
			{
				stack.pop();
			}
			if(!stack.isEmpty())
			{
				list.add(stack.peek());
			}else{
				list.add(-1);
			}
		}
		stack.push(arr[i]);
	}
	
	for(int i = 0; i < list.size(); i++)
	{
		System.out.println(list.get(i));
	}
}
	
	public static void NearestSmaallerToRightStack(int[] arr)
	{
		Stack<Integer> stack = new Stack<Integer>();
		ArrayList<Integer> list = new ArrayList<Integer>();
		for(int i = arr.length - 1; i >= 0; i--)
		{
			if (stack.isEmpty()){
				list.add(-1);
			}else if(arr[i] > stack.peek()){
				list.add(stack.peek());
			}else {
				while(!stack.isEmpty() && stack.peek() > arr[i])
				{
					stack.pop();
				}
				if(!stack.isEmpty())
				{
					list.add(stack.peek());
				}else{
					list.add(-1);
				}
			}
			stack.push(arr[i]);
		}
		
		for(int i = list.size() - 1; i >= 0; i--)
		{
			System.out.println(list.get(i));
		}
	}
}

